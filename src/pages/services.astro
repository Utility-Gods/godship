---
import { Icon } from "astro-icon/components";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import { makeIssue } from "astro:schema";
import { manifest } from "astro:ssr-manifest";

// Calculate counts for each category
const getCategoryCounts = (services) => {
  const counts = {
    all: services.length,
  };
  services.forEach((service) => {
    counts[service.category] = (counts[service.category] || 0) + 1;
  });
  return counts;
};

// Calculate counts for each language
const getLanguageCounts = (services) => {
  const counts = {
    all: services.length,
  };
  services.forEach((service) => {
    service.languages.forEach((lang) => {
      counts[lang] = (counts[lang] || 0) + 1;
    });
  });
  return counts;
};

const categories = [
  { id: "all", name: "All" },
  { id: "cms", name: "CMS" },
  { id: "saas", name: "SaaS Products" },
  { id: "tools", name: "Developer Tools" },
  { id: "templates", name: "Templates" },
  { id: "open-source", name: "Open Source" },
];

const languages = [
  { id: "all", name: "All" },
  { id: "go", name: "Go", icon: "/icons/golang.svg" },
  { id: "python", name: "Python", icon: "/icons/python.svg" },
  { id: "typescript", name: "TypeScript", icon: "/icons/typescript.svg" },
  { id: "javascript", name: "JavaScript", icon: "/icons/javascript.svg" },
  { id: "htmx", name: "HTMX", icon: "/icons/htmx.svg" },
  { id: "strapi", name: "Strapi", icon: "/icons/strapi.svg" },
  { id: "ocaml", name: "OCaml", icon: "/icons/ocaml.svg" },
];

const services = [
  {
    title: "Fillo - AI Form Filler",
    description:
      "AI-powered Chrome extension that intelligently fills form fields on localhost development sites. Support for multiple AI providers and smart caching for efficient development.",
    category: "tools",
    languages: ["typescript"],
    icon: "ph:magic-wand-bold",
    link: "https://github.com/Utility-Gods/fillo",
    isProduct: true,
  },
  {
    title: "Hypermedia Sync",
    description:
      "Real-time synchronization experiments using hypermedia-driven architecture. Sync 10,000 checkboxes across browsers with Server-Sent Events and HTML fragments.",
    category: "tools",
    languages: ["go", "htmx"],
    icon: "ph:broadcast-bold",
    link: "https://hypermedia.utilitygods.com",
    isProduct: true,
  },
  {
    title: "OrangeGas - Headless CMS",
    description:
      "A general-purpose CMS that empowers the way you create and manage content. Build collections, blogs, and rich text content with ease.",
    category: "cms",
    languages: ["typescript", "strapi"],
    icon: "ph:database-bold",
    link: "https://orangegas.utilitygods.com",
    isProduct: true,
  },
  {
    title: "PhotoShip - Catalogue Generation At Large",
    description:
      "Enterprise-grade OCR and image processing SaaS for e-commerce. Transform product catalogs, extract data from PDFs, and generate custom brochures with AI-powered processing.",
    category: "saas",
    languages: ["python", "go", "htmx"],
    icon: "ph:image-bold",
    link: "https://photoship.app",
    isProduct: true,
  },
  {
    title: "DocuGods",
    description:
      "SaaS platform for automated document processing and verification. Simplifies government ID applications with AI-powered document analysis and validation.",
    category: "saas",
    languages: ["typescript", "python"],
    icon: "ph:file-text-bold",
    link: "https://docugods.com",
    isProduct: true,
  },
  {
    title: "PasteViz",
    description:
      "SaaS analytics platform for instant data visualization. Create, share, and embed beautiful charts and graphs without coding.",
    category: "saas",
    languages: ["typescript"],
    icon: "ph:chart-line-bold",
    link: "https://pasteviz.vercel.app/",
    isProduct: true,
  },
  {
    title: "Batch GeoCoding API",
    description:
      "High-performance geocoding service for bulk address processing. Convert addresses to coordinates at scale with enterprise-grade reliability.",
    category: "saas",
    languages: ["typescript"],
    icon: "ph:map-pin-bold",
    link: "https://geocoding-api.vercel.app/",
    isProduct: true,
  },
  {
    title: "Angular-httpshooter",
    description:
      "An AngularJS factory that manages HTTP calls asynchronously, ensuring single-threaded communication.",
    category: "open-source",
    languages: ["javascript"],
    icon: "ph:arrows-out-bold",
    link: "https://www.npmjs.com/package/angular-httpshooter",
  },
  {
    title: "CSS Media All",
    description:
      "A comprehensive CSS library with media queries for responsive web design.",
    category: "open-source",
    languages: ["javascript"],
    icon: "ph:device-mobile-bold",
    link: "https://www.npmjs.com/package/css-media-all",
  },
  {
    title: "Prisma Generator",
    description:
      "A powerful tool for generating Prisma schemas with AI assistance.",
    category: "tools",
    languages: ["typescript"],
    icon: "ph:database-bold",
    link: "https://github.com/siddarthvader/prisma-gen",
  },
  {
    title: "Node Sitemap CLI",
    description:
      "A command-line tool for generating sitemaps for your web applications.",
    category: "open-source",
    languages: ["typescript"],
    icon: "ph:tree-structure-bold",
    link: "https://github.com/Utility-Gods/node-sitemap-cli",
  },

  {
    title: "QR Gods - AI QR Code Generator",
    description:
      "Generate beautiful, customizable QR codes for your applications and marketing materials.",
    category: "tools",
    languages: ["typescript"],
    icon: "ph:qr-code-bold",
    link: "https://github.com/Utility-Gods/qr-gen-ai",
    isProduct: true,
  },

  {
    title: "Gottem - Developer CLI Tool",
    description: "Command-line tool to streamline development workflows.",
    category: "tools",
    languages: ["go"],
    icon: "ph:terminal-window-bold",
    link: "https://github.com/Utility-Gods/gottem",
    isProduct: true,
  },
  {
    title: "Modern Astro Website Starter",
    description: "Modern website template built with Astro and TailwindCSS.",
    category: "templates",
    languages: ["typescript"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/godship",
  },
  {
    title: "FastAPI HTMX Full-Stack Boilerplate",
    description: "Full-stack template with FastAPI, HTMX, and TailwindCSS.",
    category: "templates",
    languages: ["python"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/python-htmx-postgres-template",
  },
  {
    title: "Go Echo HTMX Starter Kit",
    description:
      "Backend template using Go Echo framework with HTMX integration.",
    category: "templates",
    languages: ["go"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/go-htmx-templ-echo-air",
  },
  {
    title: "SvelteKit shadcn Starter Kit",
    description: "SvelteKit template with Tailwind and shadcn-svelte.",
    category: "templates",
    languages: ["typescript"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/sveltekit-starter",
  },
  {
    title: "FastAPI SQLAlchemy Full-Stack Kit",
    description:
      "Scaffolding for Python webapp API using FastAPI, Tailwind, SQLAlchemy, Alembic, and Pydantic.",
    category: "templates",
    languages: ["python"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/python-fastapi-sqlchemy-htmx-tailwind",
  },
  {
    title: "Claude Source Code Explorer",
    description: "Claude code full original source code from source maps.",
    category: "tools",
    languages: ["typescript"],
    icon: "ph:brain-bold",
    link: "https://github.com/Utility-Gods/claude-code",
  },
  {
    title: "Python HTMX Postgres Stack",
    description: "Python HTMX Tailwind Jinja Postgres Alembic template.",
    category: "templates",
    languages: ["python"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/python-htmx-postgres-template",
  },
  {
    title: "FastAPI Quick Start Template",
    description: "Scaffolding for API using FastAPI and Uvicorn.",
    category: "templates",
    languages: ["python"],
    icon: "ph:code-bold",
    link: "https://github.com/Utility-Gods/py-init-repo",
  },
  {
    title: "PhotoCaml App in OCaml with Dream",
    description: "PhotoCaml App in OCaml with Dream",
    category: "templates",
    languages: ["ocaml"],
    icon: "ph:camera-bold",
    link: "https://github.com/Utility-Gods/photocaml",
  },
];

const categoryCounts = getCategoryCounts(services);
const languageCounts = getLanguageCounts(services);
---

<Layout title="Services">
  <Container>
    <Sectionhead>
      <Fragment slot="title">Our Services</Fragment>
      <Fragment slot="desc">
        Explore our {categoryCounts.all} tools, templates, and solutions
      </Fragment>
    </Sectionhead>

    <div class="mt-8 max-w-6xl mx-auto">
      <!-- Filters -->
      <div
        class="bg-white p-4 rounded-lg shadow-sm border border-gray-100 mb-8">
        <div class="flex flex-col sm:flex-row gap-6 justify-center">
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-2">Category</h3>
            <div class="flex flex-wrap gap-2" id="category-filters">
              {
                categories.map((category) => (
                  <button
                    class="px-3 py-1 text-sm rounded-full border border-red-200 text-red-600 hover:bg-red-50 transition-colors data-[active=true]:bg-red-500 data-[active=true]:text-white data-[active=true]:border-red-500 inline-flex items-center gap-1.5"
                    data-category={category.id}
                    data-active={category.id === "all"}>
                    {category.name}
                    <span class="inline-flex items-center justify-center bg-red-50 text-red-600 rounded-full w-5 h-5 text-xs data-[active=true]:bg-red-400">
                      {categoryCounts[category.id] || 0}
                    </span>
                  </button>
                ))
              }
            </div>
          </div>
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-2">Language</h3>
            <div class="flex flex-wrap gap-2" id="language-filters">
              {
                languages.map((lang) => (
                  <button
                    class="px-3 py-1 text-sm rounded-full border border-red-200 text-red-600 hover:bg-red-50 transition-colors data-[active=true]:bg-red-500 data-[active=true]:text-white data-[active=true]:border-red-500 inline-flex items-center gap-1.5"
                    data-language={lang.id}
                    data-active={lang.id === "all"}>
                    {lang.icon && (
                      <img src={lang.icon} alt={lang.name} class="w-4 h-4" />
                    )}
                    {lang.name}
                    <span class="inline-flex items-center justify-center bg-red-50 text-red-600 rounded-full w-5 h-5 text-xs data-[active=true]:bg-red-400">
                      {languageCounts[lang.id] || 0}
                    </span>
                  </button>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <!-- Services Grid -->
      <div id="services-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          services.map((service) => (
            <a
              href={service.link}
              target="_blank"
              rel="noopener noreferrer"
              class:list={[
                "group bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-all duration-300",
                { "ring-1 ring-red-100": service.isProduct },
              ]}
              data-category={service.category}
              data-languages={service.languages.join(",")}>
              <div class="flex items-start justify-between mb-4">
                <span class="inline-flex items-center justify-center w-10 h-10 rounded-lg bg-red-50 text-red-500 group-hover:bg-red-100 transition-colors">
                  <Icon name={service.icon} class="w-5 h-5" />
                </span>
                {service.isProduct && (
                  <span class="inline-flex items-center rounded-full bg-red-50 px-2.5 py-0.5 text-xs font-medium text-red-600">
                    Featured
                  </span>
                )}
              </div>
              <h3 class="text-lg font-semibold text-gray-800 mb-2 group-hover:text-red-600 transition-colors">
                {service.title}
              </h3>
              <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                {service.description}
              </p>
              <div class="flex items-center justify-between mt-auto">
                <div class="flex gap-2">
                  {service.languages.map((lang) => {
                    const langInfo = languages.find((l) => l.id === lang);
                    return (
                      langInfo?.icon && (
                        <img
                          src={langInfo.icon}
                          alt={langInfo.name}
                          title={langInfo.name}
                          class="w-6"
                        />
                      )
                    );
                  })}
                </div>
                <span class="text-red-500 text-sm group-hover:translate-x-1 transition-transform">
                  Learn more{" "}
                  <Icon name="ph:arrow-right-bold" class="w-4 h-4 inline" />
                </span>
              </div>
            </a>
          ))
        }
      </div>
    </div>
  </Container>
</Layout>

<style>
  [data-active="true"] {
    @apply bg-red-500 text-white border-red-500;
  }
  [data-active="true"] span {
    @apply bg-red-400 text-white;
  }
</style>

<script>
  function updateFilters() {
    const categoryFilter =
      document
        .querySelector('[data-category][data-active="true"]')
        ?.getAttribute("data-category") || "all";
    const languageFilter =
      document
        .querySelector('[data-language][data-active="true"]')
        ?.getAttribute("data-language") || "all";

    const services = document.querySelectorAll("#services-grid > a");

    services.forEach((service) => {
      const serviceCategory = service.getAttribute("data-category");
      const serviceLanguages =
        service.getAttribute("data-languages")?.split(",") || [];

      const matchesCategory =
        categoryFilter === "all" || serviceCategory === categoryFilter;
      const matchesLanguage =
        languageFilter === "all" || serviceLanguages.includes(languageFilter);

      if (matchesCategory && matchesLanguage) {
        service.classList.remove("hidden");
      } else {
        service.classList.add("hidden");
      }
    });
  }

  // Set up category filter buttons
  document.querySelectorAll("#category-filters button").forEach((button) => {
    button.addEventListener("click", () => {
      document
        .querySelectorAll("#category-filters button")
        .forEach((btn) => btn.setAttribute("data-active", "false"));
      button.setAttribute("data-active", "true");
      updateFilters();
    });
  });

  // Set up language filter buttons
  document.querySelectorAll("#language-filters button").forEach((button) => {
    button.addEventListener("click", () => {
      document
        .querySelectorAll("#language-filters button")
        .forEach((btn) => btn.setAttribute("data-active", "false"));
      button.setAttribute("data-active", "true");
      updateFilters();
    });
  });
</script>
